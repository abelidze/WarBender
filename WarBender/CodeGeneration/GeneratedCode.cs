// This file is automatically generated from GeneratedCode.tt. Do not modify it directly!
// If you get build errors in this file, delete its entire contents and rebuild.
#pragma warning disable 162
#pragma warning disable 219
using System.CodeDom.Compiler;
using System.IO;

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Trigger
    {
        public static WarBender.GameData.Trigger Create() => new _Impl();
        private class _Impl : WarBender.GameData.Trigger
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.status = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.status = default;
                }

                if (true)
                {
                    this.check_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.check_timer = default;
                }

                if (true)
                {
                    this.delay_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.delay_timer = default;
                }

                if (true)
                {
                    this.rearm_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.rearm_timer = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.status);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.check_timer);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.delay_timer);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.rearm_timer);
                }
            }

            int _field__status;
            public override int status
            {
                get => _field__status;
                set
                {
                    SetProperty("status", ref _field__status, value);
                }
            }

            long _field__check_timer;
            public override long check_timer
            {
                get => _field__check_timer;
                set
                {
                    SetProperty("check_timer", ref _field__check_timer, value);
                }
            }

            long _field__delay_timer;
            public override long delay_timer
            {
                get => _field__delay_timer;
                set
                {
                    SetProperty("delay_timer", ref _field__delay_timer, value);
                }
            }

            long _field__rearm_timer;
            public override long rearm_timer
            {
                get => _field__rearm_timer;
                set
                {
                    SetProperty("rearm_timer", ref _field__rearm_timer, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Trigger>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Trigger IDataObjectFactory<WarBender.GameData.Trigger>.Create() => WarBender.GameData.Trigger.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class SimpleTrigger
    {
        public static WarBender.GameData.SimpleTrigger Create() => new _Impl();
        private class _Impl : WarBender.GameData.SimpleTrigger
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.check_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.check_timer = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._long.Write(writer, this.check_timer);
                }
            }

            long _field__check_timer;
            public override long check_timer
            {
                get => _field__check_timer;
                set
                {
                    SetProperty("check_timer", ref _field__check_timer, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.SimpleTrigger>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.SimpleTrigger IDataObjectFactory<WarBender.GameData.SimpleTrigger>.Create() => WarBender.GameData.SimpleTrigger.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class MapTrack
    {
        public static WarBender.GameData.MapTrack Create() => new _Impl();
        private class _Impl : WarBender.GameData.MapTrack
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_x = default;
                }

                if (true)
                {
                    this.position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_y = default;
                }

                if (true)
                {
                    this.position_z = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_z = default;
                }

                if (true)
                {
                    this.rotation = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.rotation = default;
                }

                if (true)
                {
                    this.age = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.age = default;
                }

                if (true)
                {
                    this.flags = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.flags = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_z);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.rotation);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.age);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.flags);
                }
            }

            float _field__position_x;
            public override float position_x
            {
                get => _field__position_x;
                set
                {
                    SetProperty("position_x", ref _field__position_x, value);
                }
            }

            float _field__position_y;
            public override float position_y
            {
                get => _field__position_y;
                set
                {
                    SetProperty("position_y", ref _field__position_y, value);
                }
            }

            float _field__position_z;
            public override float position_z
            {
                get => _field__position_z;
                set
                {
                    SetProperty("position_z", ref _field__position_z, value);
                }
            }

            float _field__rotation;
            public override float rotation
            {
                get => _field__rotation;
                set
                {
                    SetProperty("rotation", ref _field__rotation, value);
                }
            }

            float _field__age;
            public override float age
            {
                get => _field__age;
                set
                {
                    SetProperty("age", ref _field__age, value);
                }
            }

            int _field__flags;
            public override int flags
            {
                get => _field__flags;
                set
                {
                    SetProperty("flags", ref _field__flags, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.MapTrack>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.MapTrack IDataObjectFactory<WarBender.GameData.MapTrack>.Create() => WarBender.GameData.MapTrack.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Note
    {
        public static WarBender.GameData.Note Create() => new _Impl();
        private class _Impl : WarBender.GameData.Note
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.text = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.text = default;
                }

                if (true)
                {
                    this.value = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.value = default;
                }

                if (true)
                {
                    this.tableau_material_id = ValueSerializers._WarBender_EntityReference_WarBender_Modules_TableauMaterialDefinition_.Read(reader);
                }
                else
                {
                    this.tableau_material_id = default;
                }

                if (true)
                {
                    this.available = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this.available = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._string.Write(writer, this.text);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.value);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_Modules_TableauMaterialDefinition_.Write(writer, this.tableau_material_id);
                }

                if (true)
                {
                    ValueSerializers._bool.Write(writer, this.available);
                }
            }

            string _field__text;
            public override string text
            {
                get => _field__text;
                set
                {
                    SetProperty("text", ref _field__text, value);
                }
            }

            int _field__value;
            public override int value
            {
                get => _field__value;
                set
                {
                    SetProperty("value", ref _field__value, value);
                }
            }

            WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition> _field__tableau_material_id;
            public override WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition> tableau_material_id
            {
                get => _field__tableau_material_id;
                set
                {
                    SetProperty("tableau_material_id", ref _field__tableau_material_id, value);
                }
            }

            bool _field__available;
            public override bool available
            {
                get => _field__available;
                set
                {
                    SetProperty("available", ref _field__available, value);
                }
            }

            public _Impl()
            {
                tableau_material_id = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Note>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Note IDataObjectFactory<WarBender.GameData.Note>.Create() => WarBender.GameData.Note.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class InfoPage
    {
        public static WarBender.GameData.InfoPage Create() => new _Impl();
        private class _Impl : WarBender.GameData.InfoPage
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.notes.ReadFrom(reader);
                }
                else
                {
                    this.notes.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.notes.WriteTo(writer);
                }
            }

            public _Impl()
            {
                (notes as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.InfoPage>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.InfoPage IDataObjectFactory<WarBender.GameData.InfoPage>.Create() => WarBender.GameData.InfoPage.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Scene
    {
        public static WarBender.GameData.Scene Create() => new _Impl();
        private class _Impl : WarBender.GameData.Scene
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.slots.WriteTo(writer);
                }
            }

            public _Impl()
            {
                (slots as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Scene>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Scene IDataObjectFactory<WarBender.GameData.Scene>.Create() => WarBender.GameData.Scene.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Quest
    {
        public static WarBender.GameData.Quest Create() => new _Impl();
        private class _Impl : WarBender.GameData.Quest
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.progression = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.progression = default;
                }

                if (true)
                {
                    this.giver_troop_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Troop_.Read(reader);
                }
                else
                {
                    this.giver_troop_id = default;
                }

                if (true)
                {
                    this.number = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.number = default;
                }

                if (true)
                {
                    this.start_date = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.start_date = default;
                }

                if (true)
                {
                    this.title = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.title = default;
                }

                if (true)
                {
                    this.text = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.text = default;
                }

                if (true)
                {
                    this.giver = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.giver = default;
                }

                if (true)
                {
                    this.notes.ReadFrom(reader);
                }
                else
                {
                    this.notes.Clear();
                }

                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.progression);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Troop_.Write(writer, this.giver_troop_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.number);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.start_date);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.title);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.text);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.giver);
                }

                if (true)
                {
                    this.notes.WriteTo(writer);
                }

                if (true)
                {
                    this.slots.WriteTo(writer);
                }
            }

            int _field__progression;
            public override int progression
            {
                get => _field__progression;
                set
                {
                    SetProperty("progression", ref _field__progression, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Troop> _field__giver_troop_id;
            public override WarBender.EntityReference<WarBender.GameData.Troop> giver_troop_id
            {
                get => _field__giver_troop_id;
                set
                {
                    SetProperty("giver_troop_id", ref _field__giver_troop_id, value);
                }
            }

            int _field__number;
            public override int number
            {
                get => _field__number;
                set
                {
                    SetProperty("number", ref _field__number, value);
                }
            }

            float _field__start_date;
            public override float start_date
            {
                get => _field__start_date;
                set
                {
                    SetProperty("start_date", ref _field__start_date, value);
                }
            }

            string _field__title;
            public override string title
            {
                get => _field__title;
                set
                {
                    SetProperty("title", ref _field__title, value);
                }
            }

            string _field__text;
            public override string text
            {
                get => _field__text;
                set
                {
                    SetProperty("text", ref _field__text, value);
                }
            }

            string _field__giver;
            public override string giver
            {
                get => _field__giver;
                set
                {
                    SetProperty("giver", ref _field__giver, value);
                }
            }

            public _Impl()
            {
                giver_troop_id = default;
                (notes as IDataObjectChild)?.WithParent(this, -1);
                (slots as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Quest>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Quest IDataObjectFactory<WarBender.GameData.Quest>.Create() => WarBender.GameData.Quest.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Faction
    {
        public static WarBender.GameData.Faction Create() => new _Impl();
        private class _Impl : WarBender.GameData.Faction
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }

                if (true)
                {
                    this.relations.ReadFrom(reader);
                }
                else
                {
                    this.relations.Clear();
                }

                if (true)
                {
                    this.name = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.name = default;
                }

                if (true)
                {
                    this.renamed = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this.renamed = default;
                }

                if (true)
                {
                    this.color = ValueSerializers._System_Drawing_Color.Read(reader);
                }
                else
                {
                    this.color = default;
                }

                if (true)
                {
                    this._1 = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this._1 = default;
                }

                if (true)
                {
                    this.notes.ReadFrom(reader);
                }
                else
                {
                    this.notes.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.slots.WriteTo(writer);
                }

                if (true)
                {
                    this.relations.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.name);
                }

                if (true)
                {
                    ValueSerializers._bool.Write(writer, this.renamed);
                }

                if (true)
                {
                    ValueSerializers._System_Drawing_Color.Write(writer, this.color);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this._1);
                }

                if (true)
                {
                    this.notes.WriteTo(writer);
                }
            }

            string _field__name;
            public override string name
            {
                get => _field__name;
                set
                {
                    SetProperty("name", ref _field__name, value);
                }
            }

            bool _field__renamed;
            public override bool renamed
            {
                get => _field__renamed;
                set
                {
                    SetProperty("renamed", ref _field__renamed, value);
                }
            }

            System.Drawing.Color _field__color;
            public override System.Drawing.Color color
            {
                get => _field__color;
                set
                {
                    SetProperty("color", ref _field__color, value);
                }
            }

            public _Impl()
            {
                (slots as IDataObjectChild)?.WithParent(this, -1);
                (relations as IDataObjectChild)?.WithParent(this, -1);
                (notes as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Faction>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Faction IDataObjectFactory<WarBender.GameData.Faction>.Create() => WarBender.GameData.Faction.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class PartyTemplate
    {
        public static WarBender.GameData.PartyTemplate Create() => new _Impl();
        private class _Impl : WarBender.GameData.PartyTemplate
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.num_parties_created = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_parties_created = default;
                }

                if (true)
                {
                    this.num_parties_destroyed = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_parties_destroyed = default;
                }

                if (true)
                {
                    this.num_parties_destroyed_by_player = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_parties_destroyed_by_player = default;
                }

                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.num_parties_created);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.num_parties_destroyed);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.num_parties_destroyed_by_player);
                }

                if (true)
                {
                    this.slots.WriteTo(writer);
                }
            }

            int _field__num_parties_created;
            public override int num_parties_created
            {
                get => _field__num_parties_created;
                set
                {
                    SetProperty("num_parties_created", ref _field__num_parties_created, value);
                }
            }

            int _field__num_parties_destroyed;
            public override int num_parties_destroyed
            {
                get => _field__num_parties_destroyed;
                set
                {
                    SetProperty("num_parties_destroyed", ref _field__num_parties_destroyed, value);
                }
            }

            int _field__num_parties_destroyed_by_player;
            public override int num_parties_destroyed_by_player
            {
                get => _field__num_parties_destroyed_by_player;
                set
                {
                    SetProperty("num_parties_destroyed_by_player", ref _field__num_parties_destroyed_by_player, value);
                }
            }

            public _Impl()
            {
                (slots as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.PartyTemplate>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.PartyTemplate IDataObjectFactory<WarBender.GameData.PartyTemplate>.Create() => WarBender.GameData.PartyTemplate.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class TroopStack
    {
        public static WarBender.GameData.TroopStack Create() => new _Impl();
        private class _Impl : WarBender.GameData.TroopStack
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.troop_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Troop_.Read(reader);
                }
                else
                {
                    this.troop_id = default;
                }

                if (true)
                {
                    this.num_troops = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_troops = default;
                }

                if (true)
                {
                    this.num_wounded_troops = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_wounded_troops = default;
                }

                if (true)
                {
                    this.flags = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.flags = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Troop_.Write(writer, this.troop_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.num_troops);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.num_wounded_troops);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.flags);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Troop> _field__troop_id;
            public override WarBender.EntityReference<WarBender.GameData.Troop> troop_id
            {
                get => _field__troop_id;
                set
                {
                    SetProperty("troop_id", ref _field__troop_id, value);
                }
            }

            int _field__num_troops;
            public override int num_troops
            {
                get => _field__num_troops;
                set
                {
                    SetProperty("num_troops", ref _field__num_troops, value);
                }
            }

            int _field__num_wounded_troops;
            public override int num_wounded_troops
            {
                get => _field__num_wounded_troops;
                set
                {
                    SetProperty("num_wounded_troops", ref _field__num_wounded_troops, value);
                }
            }

            int _field__flags;
            public override int flags
            {
                get => _field__flags;
                set
                {
                    SetProperty("flags", ref _field__flags, value);
                }
            }

            public _Impl()
            {
                troop_id = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.TroopStack>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.TroopStack IDataObjectFactory<WarBender.GameData.TroopStack>.Create() => WarBender.GameData.TroopStack.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Party
    {
        public static WarBender.GameData.Party Create() => new _Impl();
        private class _Impl : WarBender.GameData.Party
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.raw_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.raw_id = default;
                }

                if (true)
                {
                    this.id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.id = default;
                }

                if (true)
                {
                    this.party_id = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.party_id = default;
                }

                if (true)
                {
                    this.name = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.name = default;
                }

                if (true)
                {
                    this.flags = ValueSerializers._WarBender_GameData_PartyFlags.Read(reader);
                }
                else
                {
                    this.flags = default;
                }

                if (true)
                {
                    this.menu_id = ValueSerializers._WarBender_EntityReference_WarBender_Modules_MenuDefinition_.Read(reader);
                }
                else
                {
                    this.menu_id = default;
                }

                if (true)
                {
                    this.party_template_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_PartyTemplate_.Read(reader);
                }
                else
                {
                    this.party_template_id = default;
                }

                if (true)
                {
                    this.faction_id = ValueSerializers._System_Nullable_WarBender_EntityReference_WarBender_GameData_Faction__.Read(reader);
                }
                else
                {
                    this.faction_id = default;
                }

                if (true)
                {
                    this.personality = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.personality = default;
                }

                if (true)
                {
                    this.default_behavior = ValueSerializers._System_Nullable_WarBender_GameData_AIBehavior_.Read(reader);
                }
                else
                {
                    this.default_behavior = default;
                }

                if (true)
                {
                    this.current_behavior = ValueSerializers._WarBender_GameData_AIBehavior.Read(reader);
                }
                else
                {
                    this.current_behavior = default;
                }

                if (true)
                {
                    this.default_behavior_object_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.default_behavior_object_id = default;
                }

                if (true)
                {
                    this.current_behavior_object_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.current_behavior_object_id = default;
                }

                if (true)
                {
                    this.initial_position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.initial_position_x = default;
                }

                if (true)
                {
                    this.initial_position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.initial_position_y = default;
                }

                if (true)
                {
                    this.target_position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.target_position_x = default;
                }

                if (true)
                {
                    this.target_position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.target_position_y = default;
                }

                if (true)
                {
                    this.position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_x = default;
                }

                if (true)
                {
                    this.position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_y = default;
                }

                if (true)
                {
                    this.position_z = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_z = default;
                }

                if (true)
                {
                    this.stacks.ReadFrom(reader);
                }
                else
                {
                    this.stacks.Clear();
                }

                if (true)
                {
                    this.bearing = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.bearing = default;
                }

                if (true)
                {
                    this.renamed = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this.renamed = default;
                }

                if (true)
                {
                    this.extra_text = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.extra_text = default;
                }

                if (true)
                {
                    this.morale = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.morale = default;
                }

                if (true)
                {
                    this.hunger = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.hunger = default;
                }

                if (true)
                {
                    this._1 = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this._1 = default;
                }

                if (true)
                {
                    this.patrol_radius = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.patrol_radius = default;
                }

                if (true)
                {
                    this.initiative = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.initiative = default;
                }

                if (true)
                {
                    this.helpfulness = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.helpfulness = default;
                }

                if (true)
                {
                    this.label_visible = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.label_visible = default;
                }

                if (true)
                {
                    this.bandit_attraction = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.bandit_attraction = default;
                }

                if (true && game.MatchVersions(900, 999, 1020, 2147483647))
                {
                    this.marshall = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.marshall = default;
                }

                if (true)
                {
                    this.ignore_player_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.ignore_player_timer = default;
                }

                if (true)
                {
                    this.banner_map_icon_id = ValueSerializers._WarBender_EntityReference_WarBender_Modules_MapIconDefinition_.Read(reader);
                }
                else
                {
                    this.banner_map_icon_id = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.extra_map_icon_id = ValueSerializers._WarBender_EntityReference_WarBender_Modules_MapIconDefinition_.Read(reader);
                }
                else
                {
                    this.extra_map_icon_id = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.extra_map_icon_up_down_distance = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.extra_map_icon_up_down_distance = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.extra_map_icon_up_down_frequency = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.extra_map_icon_up_down_frequency = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.extra_map_icon_rotate_frequency = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.extra_map_icon_rotate_frequency = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.extra_map_icon_fade_frequency = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.extra_map_icon_fade_frequency = default;
                }

                if (true)
                {
                    this.attached_to_party_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Read(reader);
                }
                else
                {
                    this.attached_to_party_id = default;
                }

                if (true && game.MatchVersions(1162, 2147483647))
                {
                    this._2 = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this._2 = default;
                }

                if (true)
                {
                    this.is_attached = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this.is_attached = default;
                }

                if (true)
                {
                    this.attached_party_ids.ReadFrom(reader);
                }
                else
                {
                    this.attached_party_ids.Clear();
                }

                if (true)
                {
                    this.particle_system_ids.ReadFrom(reader);
                }
                else
                {
                    this.particle_system_ids.Clear();
                }

                if (true)
                {
                    this.notes.ReadFrom(reader);
                }
                else
                {
                    this.notes.Clear();
                }

                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.raw_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.id);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.party_id);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.name);
                }

                if (true)
                {
                    ValueSerializers._WarBender_GameData_PartyFlags.Write(writer, this.flags);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_Modules_MenuDefinition_.Write(writer, this.menu_id);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_PartyTemplate_.Write(writer, this.party_template_id);
                }

                if (true)
                {
                    ValueSerializers._System_Nullable_WarBender_EntityReference_WarBender_GameData_Faction__.Write(writer, this.faction_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.personality);
                }

                if (true)
                {
                    ValueSerializers._System_Nullable_WarBender_GameData_AIBehavior_.Write(writer, this.default_behavior);
                }

                if (true)
                {
                    ValueSerializers._WarBender_GameData_AIBehavior.Write(writer, this.current_behavior);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.default_behavior_object_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.current_behavior_object_id);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.initial_position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.initial_position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.target_position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.target_position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_z);
                }

                if (true)
                {
                    this.stacks.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.bearing);
                }

                if (true)
                {
                    ValueSerializers._bool.Write(writer, this.renamed);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.extra_text);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.morale);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.hunger);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this._1);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.patrol_radius);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.initiative);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.helpfulness);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.label_visible);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.bandit_attraction);
                }

                if (true && game.MatchVersions(900, 999, 1020, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.marshall);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.ignore_player_timer);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_Modules_MapIconDefinition_.Write(writer, this.banner_map_icon_id);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_Modules_MapIconDefinition_.Write(writer, this.extra_map_icon_id);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._float.Write(writer, this.extra_map_icon_up_down_distance);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._float.Write(writer, this.extra_map_icon_up_down_frequency);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._float.Write(writer, this.extra_map_icon_rotate_frequency);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._float.Write(writer, this.extra_map_icon_fade_frequency);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Write(writer, this.attached_to_party_id);
                }

                if (true && game.MatchVersions(1162, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this._2);
                }

                if (true)
                {
                    ValueSerializers._bool.Write(writer, this.is_attached);
                }

                if (true)
                {
                    this.attached_party_ids.WriteTo(writer);
                }

                if (true)
                {
                    this.particle_system_ids.WriteTo(writer);
                }

                if (true)
                {
                    this.notes.WriteTo(writer);
                }

                if (true)
                {
                    this.slots.WriteTo(writer);
                }
            }

            int _field__raw_id;
            public override int raw_id
            {
                get => _field__raw_id;
                set
                {
                    SetProperty("raw_id", ref _field__raw_id, value);
                }
            }

            int _field__id;
            public override int id
            {
                get => _field__id;
                set
                {
                    SetProperty("id", ref _field__id, value);
                }
            }

            string _field__party_id;
            public override string party_id
            {
                get => _field__party_id;
                set
                {
                    SetProperty("party_id", ref _field__party_id, value);
                }
            }

            string _field__name;
            public override string name
            {
                get => _field__name;
                set
                {
                    SetProperty("name", ref _field__name, value);
                }
            }

            WarBender.GameData.PartyFlags _field__flags;
            public override WarBender.GameData.PartyFlags flags
            {
                get => _field__flags;
                set
                {
                    SetProperty("flags", ref _field__flags, value);
                }
            }

            WarBender.EntityReference<WarBender.Modules.MenuDefinition> _field__menu_id;
            public override WarBender.EntityReference<WarBender.Modules.MenuDefinition> menu_id
            {
                get => _field__menu_id;
                set
                {
                    SetProperty("menu_id", ref _field__menu_id, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.PartyTemplate> _field__party_template_id;
            public override WarBender.EntityReference<WarBender.GameData.PartyTemplate> party_template_id
            {
                get => _field__party_template_id;
                set
                {
                    SetProperty("party_template_id", ref _field__party_template_id, value);
                }
            }

            System.Nullable<WarBender.EntityReference<WarBender.GameData.Faction>> _field__faction_id;
            public override System.Nullable<WarBender.EntityReference<WarBender.GameData.Faction>> faction_id
            {
                get => _field__faction_id;
                set
                {
                    SetProperty("faction_id", ref _field__faction_id, value);
                }
            }

            int _field__personality;
            public override int personality
            {
                get => _field__personality;
                set
                {
                    SetProperty("personality", ref _field__personality, value);
                }
            }

            System.Nullable<WarBender.GameData.AIBehavior> _field__default_behavior;
            public override System.Nullable<WarBender.GameData.AIBehavior> default_behavior
            {
                get => _field__default_behavior;
                set
                {
                    SetProperty("default_behavior", ref _field__default_behavior, value);
                }
            }

            WarBender.GameData.AIBehavior _field__current_behavior;
            public override WarBender.GameData.AIBehavior current_behavior
            {
                get => _field__current_behavior;
                set
                {
                    SetProperty("current_behavior", ref _field__current_behavior, value);
                }
            }

            int _field__default_behavior_object_id;
            public override int default_behavior_object_id
            {
                get => _field__default_behavior_object_id;
                set
                {
                    SetProperty("default_behavior_object_id", ref _field__default_behavior_object_id, value);
                }
            }

            int _field__current_behavior_object_id;
            public override int current_behavior_object_id
            {
                get => _field__current_behavior_object_id;
                set
                {
                    SetProperty("current_behavior_object_id", ref _field__current_behavior_object_id, value);
                }
            }

            float _field__initial_position_x;
            public override float initial_position_x
            {
                get => _field__initial_position_x;
                set
                {
                    SetProperty("initial_position_x", ref _field__initial_position_x, value);
                }
            }

            float _field__initial_position_y;
            public override float initial_position_y
            {
                get => _field__initial_position_y;
                set
                {
                    SetProperty("initial_position_y", ref _field__initial_position_y, value);
                }
            }

            float _field__target_position_x;
            public override float target_position_x
            {
                get => _field__target_position_x;
                set
                {
                    SetProperty("target_position_x", ref _field__target_position_x, value);
                }
            }

            float _field__target_position_y;
            public override float target_position_y
            {
                get => _field__target_position_y;
                set
                {
                    SetProperty("target_position_y", ref _field__target_position_y, value);
                }
            }

            float _field__position_x;
            public override float position_x
            {
                get => _field__position_x;
                set
                {
                    SetProperty("position_x", ref _field__position_x, value);
                }
            }

            float _field__position_y;
            public override float position_y
            {
                get => _field__position_y;
                set
                {
                    SetProperty("position_y", ref _field__position_y, value);
                }
            }

            float _field__position_z;
            public override float position_z
            {
                get => _field__position_z;
                set
                {
                    SetProperty("position_z", ref _field__position_z, value);
                }
            }

            float _field__bearing;
            public override float bearing
            {
                get => _field__bearing;
                set
                {
                    SetProperty("bearing", ref _field__bearing, value);
                }
            }

            bool _field__renamed;
            public override bool renamed
            {
                get => _field__renamed;
                set
                {
                    SetProperty("renamed", ref _field__renamed, value);
                }
            }

            string _field__extra_text;
            public override string extra_text
            {
                get => _field__extra_text;
                set
                {
                    SetProperty("extra_text", ref _field__extra_text, value);
                }
            }

            float _field__morale;
            public override float morale
            {
                get => _field__morale;
                set
                {
                    SetProperty("morale", ref _field__morale, value);
                }
            }

            float _field__hunger;
            public override float hunger
            {
                get => _field__hunger;
                set
                {
                    SetProperty("hunger", ref _field__hunger, value);
                }
            }

            float _field__patrol_radius;
            public override float patrol_radius
            {
                get => _field__patrol_radius;
                set
                {
                    SetProperty("patrol_radius", ref _field__patrol_radius, value);
                }
            }

            float _field__initiative;
            public override float initiative
            {
                get => _field__initiative;
                set
                {
                    SetProperty("initiative", ref _field__initiative, value);
                }
            }

            float _field__helpfulness;
            public override float helpfulness
            {
                get => _field__helpfulness;
                set
                {
                    SetProperty("helpfulness", ref _field__helpfulness, value);
                }
            }

            int _field__label_visible;
            public override int label_visible
            {
                get => _field__label_visible;
                set
                {
                    SetProperty("label_visible", ref _field__label_visible, value);
                }
            }

            float _field__bandit_attraction;
            public override float bandit_attraction
            {
                get => _field__bandit_attraction;
                set
                {
                    SetProperty("bandit_attraction", ref _field__bandit_attraction, value);
                }
            }

            int _field__marshall;
            public override int marshall
            {
                get => _field__marshall;
                set
                {
                    SetProperty("marshall", ref _field__marshall, value);
                }
            }

            long _field__ignore_player_timer;
            public override long ignore_player_timer
            {
                get => _field__ignore_player_timer;
                set
                {
                    SetProperty("ignore_player_timer", ref _field__ignore_player_timer, value);
                }
            }

            WarBender.EntityReference<WarBender.Modules.MapIconDefinition> _field__banner_map_icon_id;
            public override WarBender.EntityReference<WarBender.Modules.MapIconDefinition> banner_map_icon_id
            {
                get => _field__banner_map_icon_id;
                set
                {
                    SetProperty("banner_map_icon_id", ref _field__banner_map_icon_id, value);
                }
            }

            WarBender.EntityReference<WarBender.Modules.MapIconDefinition> _field__extra_map_icon_id;
            public override WarBender.EntityReference<WarBender.Modules.MapIconDefinition> extra_map_icon_id
            {
                get => _field__extra_map_icon_id;
                set
                {
                    SetProperty("extra_map_icon_id", ref _field__extra_map_icon_id, value);
                }
            }

            float _field__extra_map_icon_up_down_distance;
            public override float extra_map_icon_up_down_distance
            {
                get => _field__extra_map_icon_up_down_distance;
                set
                {
                    SetProperty("extra_map_icon_up_down_distance", ref _field__extra_map_icon_up_down_distance, value);
                }
            }

            float _field__extra_map_icon_up_down_frequency;
            public override float extra_map_icon_up_down_frequency
            {
                get => _field__extra_map_icon_up_down_frequency;
                set
                {
                    SetProperty("extra_map_icon_up_down_frequency", ref _field__extra_map_icon_up_down_frequency, value);
                }
            }

            float _field__extra_map_icon_rotate_frequency;
            public override float extra_map_icon_rotate_frequency
            {
                get => _field__extra_map_icon_rotate_frequency;
                set
                {
                    SetProperty("extra_map_icon_rotate_frequency", ref _field__extra_map_icon_rotate_frequency, value);
                }
            }

            float _field__extra_map_icon_fade_frequency;
            public override float extra_map_icon_fade_frequency
            {
                get => _field__extra_map_icon_fade_frequency;
                set
                {
                    SetProperty("extra_map_icon_fade_frequency", ref _field__extra_map_icon_fade_frequency, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Party> _field__attached_to_party_id;
            public override WarBender.EntityReference<WarBender.GameData.Party> attached_to_party_id
            {
                get => _field__attached_to_party_id;
                set
                {
                    SetProperty("attached_to_party_id", ref _field__attached_to_party_id, value);
                }
            }

            bool _field__is_attached;
            public override bool is_attached
            {
                get => _field__is_attached;
                set
                {
                    SetProperty("is_attached", ref _field__is_attached, value);
                }
            }

            public _Impl()
            {
                menu_id = default;
                party_template_id = default;
                (stacks as IDataObjectChild)?.WithParent(this, -1);
                banner_map_icon_id = default;
                extra_map_icon_id = default;
                attached_to_party_id = default;
                (attached_party_ids as IDataObjectChild)?.WithParent(this, -1);
                (particle_system_ids as IDataObjectChild)?.WithParent(this, -1);
                (notes as IDataObjectChild)?.WithParent(this, -1);
                (slots as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Party>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Party IDataObjectFactory<WarBender.GameData.Party>.Create() => WarBender.GameData.Party.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class PlayerPartyTroopStack
    {
        public static WarBender.GameData.PlayerPartyTroopStack Create() => new _Impl();
        private class _Impl : WarBender.GameData.PlayerPartyTroopStack
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true && this.IsPresent())
                {
                    this.experience = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.experience = default;
                }

                if (true && this.IsPresent())
                {
                    this.num_upgradeable = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.num_upgradeable = default;
                }

                if (true && this.has_troop_dnas())
                {
                    this.troop_dnas.ReadFrom(reader);
                }
                else
                {
                    this.troop_dnas.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true && this.IsPresent())
                {
                    ValueSerializers._float.Write(writer, this.experience);
                }

                if (true && this.IsPresent())
                {
                    ValueSerializers._int.Write(writer, this.num_upgradeable);
                }

                if (true && this.has_troop_dnas())
                {
                    this.troop_dnas.WriteTo(writer);
                }
            }

            float _field__experience;
            public override float experience
            {
                get => _field__experience;
                set
                {
                    SetProperty("experience", ref _field__experience, value);
                }
            }

            int _field__num_upgradeable;
            public override int num_upgradeable
            {
                get => _field__num_upgradeable;
                set
                {
                    SetProperty("num_upgradeable", ref _field__num_upgradeable, value);
                }
            }

            public _Impl()
            {
                (troop_dnas as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.PlayerPartyTroopStack>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.PlayerPartyTroopStack IDataObjectFactory<WarBender.GameData.PlayerPartyTroopStack>.Create() => WarBender.GameData.PlayerPartyTroopStack.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class MapEvent
    {
        public static WarBender.GameData.MapEvent Create() => new _Impl();
        private class _Impl : WarBender.GameData.MapEvent
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.id = default;
                }

                if (true)
                {
                    this.text = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.text = default;
                }

                if (true)
                {
                    this.type = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.type = default;
                }

                if (true)
                {
                    this.position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_x = default;
                }

                if (true)
                {
                    this.position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.position_y = default;
                }

                if (true)
                {
                    this.land_position_x = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.land_position_x = default;
                }

                if (true)
                {
                    this.land_position_y = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.land_position_y = default;
                }

                if (true)
                {
                    this._1 = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this._1 = default;
                }

                if (true)
                {
                    this._2 = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this._2 = default;
                }

                if (true)
                {
                    this.attacker_party_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Read(reader);
                }
                else
                {
                    this.attacker_party_id = default;
                }

                if (true)
                {
                    this.defender_party_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Read(reader);
                }
                else
                {
                    this.defender_party_id = default;
                }

                if (true)
                {
                    this.battle_simulation_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.battle_simulation_timer = default;
                }

                if (true)
                {
                    this.next_battle_simulation = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.next_battle_simulation = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.id);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.text);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.type);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.land_position_x);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.land_position_y);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this._1);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this._2);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Write(writer, this.attacker_party_id);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Party_.Write(writer, this.defender_party_id);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.battle_simulation_timer);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.next_battle_simulation);
                }
            }

            int _field__id;
            public override int id
            {
                get => _field__id;
                set
                {
                    SetProperty("id", ref _field__id, value);
                }
            }

            string _field__text;
            public override string text
            {
                get => _field__text;
                set
                {
                    SetProperty("text", ref _field__text, value);
                }
            }

            int _field__type;
            public override int type
            {
                get => _field__type;
                set
                {
                    SetProperty("type", ref _field__type, value);
                }
            }

            float _field__position_x;
            public override float position_x
            {
                get => _field__position_x;
                set
                {
                    SetProperty("position_x", ref _field__position_x, value);
                }
            }

            float _field__position_y;
            public override float position_y
            {
                get => _field__position_y;
                set
                {
                    SetProperty("position_y", ref _field__position_y, value);
                }
            }

            float _field__land_position_x;
            public override float land_position_x
            {
                get => _field__land_position_x;
                set
                {
                    SetProperty("land_position_x", ref _field__land_position_x, value);
                }
            }

            float _field__land_position_y;
            public override float land_position_y
            {
                get => _field__land_position_y;
                set
                {
                    SetProperty("land_position_y", ref _field__land_position_y, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Party> _field__attacker_party_id;
            public override WarBender.EntityReference<WarBender.GameData.Party> attacker_party_id
            {
                get => _field__attacker_party_id;
                set
                {
                    SetProperty("attacker_party_id", ref _field__attacker_party_id, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Party> _field__defender_party_id;
            public override WarBender.EntityReference<WarBender.GameData.Party> defender_party_id
            {
                get => _field__defender_party_id;
                set
                {
                    SetProperty("defender_party_id", ref _field__defender_party_id, value);
                }
            }

            long _field__battle_simulation_timer;
            public override long battle_simulation_timer
            {
                get => _field__battle_simulation_timer;
                set
                {
                    SetProperty("battle_simulation_timer", ref _field__battle_simulation_timer, value);
                }
            }

            float _field__next_battle_simulation;
            public override float next_battle_simulation
            {
                get => _field__next_battle_simulation;
                set
                {
                    SetProperty("next_battle_simulation", ref _field__next_battle_simulation, value);
                }
            }

            public _Impl()
            {
                attacker_party_id = default;
                defender_party_id = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.MapEvent>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.MapEvent IDataObjectFactory<WarBender.GameData.MapEvent>.Create() => WarBender.GameData.MapEvent.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class ItemKind
    {
        public static WarBender.GameData.ItemKind Create() => new _Impl();
        private class _Impl : WarBender.GameData.ItemKind
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.slots.WriteTo(writer);
                }
            }

            public _Impl()
            {
                (slots as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.ItemKind>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.ItemKind IDataObjectFactory<WarBender.GameData.ItemKind>.Create() => WarBender.GameData.ItemKind.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Item
    {
        public static WarBender.GameData.Item Create() => new _Impl();
        private class _Impl : WarBender.GameData.Item
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.item_kind_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_ItemKind_.Read(reader);
                }
                else
                {
                    this.item_kind_id = default;
                }

                if (true)
                {
                    this.hit_points = ValueSerializers._ushort.Read(reader);
                }
                else
                {
                    this.hit_points = default;
                }

                if (true)
                {
                    this._1 = ValueSerializers._byte.Read(reader);
                }
                else
                {
                    this._1 = default;
                }

                if (true)
                {
                    this.modifier = ValueSerializers._WarBender_GameData_ItemModifier.Read(reader);
                }
                else
                {
                    this.modifier = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_ItemKind_.Write(writer, this.item_kind_id);
                }

                if (true)
                {
                    ValueSerializers._ushort.Write(writer, this.hit_points);
                }

                if (true)
                {
                    ValueSerializers._byte.Write(writer, this._1);
                }

                if (true)
                {
                    ValueSerializers._WarBender_GameData_ItemModifier.Write(writer, this.modifier);
                }
            }

            WarBender.EntityReference<WarBender.GameData.ItemKind> _field__item_kind_id;
            public override WarBender.EntityReference<WarBender.GameData.ItemKind> item_kind_id
            {
                get => _field__item_kind_id;
                set
                {
                    SetProperty("item_kind_id", ref _field__item_kind_id, value);
                }
            }

            ushort _field__hit_points;
            public override ushort hit_points
            {
                get => _field__hit_points;
                set
                {
                    SetProperty("hit_points", ref _field__hit_points, value);
                }
            }

            WarBender.GameData.ItemModifier _field__modifier;
            public override WarBender.GameData.ItemModifier modifier
            {
                get => _field__modifier;
                set
                {
                    SetProperty("modifier", ref _field__modifier, value);
                }
            }

            public _Impl()
            {
                item_kind_id = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Item>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Item IDataObjectFactory<WarBender.GameData.Item>.Create() => WarBender.GameData.Item.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class EquippedItems
    {
        public static WarBender.GameData.EquippedItems Create() => new _Impl();
        private class _Impl : WarBender.GameData.EquippedItems
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.item_0 = this.item_0 ?? WarBender.GameData.Item.Create();
                    this.item_0.ReadFrom(reader);
                }
                else
                {
                    this.item_0 = default;
                }

                if (true)
                {
                    this.item_1 = this.item_1 ?? WarBender.GameData.Item.Create();
                    this.item_1.ReadFrom(reader);
                }
                else
                {
                    this.item_1 = default;
                }

                if (true)
                {
                    this.item_2 = this.item_2 ?? WarBender.GameData.Item.Create();
                    this.item_2.ReadFrom(reader);
                }
                else
                {
                    this.item_2 = default;
                }

                if (true)
                {
                    this.item_3 = this.item_3 ?? WarBender.GameData.Item.Create();
                    this.item_3.ReadFrom(reader);
                }
                else
                {
                    this.item_3 = default;
                }

                if (true)
                {
                    this.head = this.head ?? WarBender.GameData.Item.Create();
                    this.head.ReadFrom(reader);
                }
                else
                {
                    this.head = default;
                }

                if (true)
                {
                    this.body = this.body ?? WarBender.GameData.Item.Create();
                    this.body.ReadFrom(reader);
                }
                else
                {
                    this.body = default;
                }

                if (true)
                {
                    this.foot = this.foot ?? WarBender.GameData.Item.Create();
                    this.foot.ReadFrom(reader);
                }
                else
                {
                    this.foot = default;
                }

                if (true)
                {
                    this.gloves = this.gloves ?? WarBender.GameData.Item.Create();
                    this.gloves.ReadFrom(reader);
                }
                else
                {
                    this.gloves = default;
                }

                if (true)
                {
                    this.horse = this.horse ?? WarBender.GameData.Item.Create();
                    this.horse.ReadFrom(reader);
                }
                else
                {
                    this.horse = default;
                }

                if (true)
                {
                    this.food = this.food ?? WarBender.GameData.Item.Create();
                    this.food.ReadFrom(reader);
                }
                else
                {
                    this.food = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.item_0.WriteTo(writer);
                }

                if (true)
                {
                    this.item_1.WriteTo(writer);
                }

                if (true)
                {
                    this.item_2.WriteTo(writer);
                }

                if (true)
                {
                    this.item_3.WriteTo(writer);
                }

                if (true)
                {
                    this.head.WriteTo(writer);
                }

                if (true)
                {
                    this.body.WriteTo(writer);
                }

                if (true)
                {
                    this.foot.WriteTo(writer);
                }

                if (true)
                {
                    this.gloves.WriteTo(writer);
                }

                if (true)
                {
                    this.horse.WriteTo(writer);
                }

                if (true)
                {
                    this.food.WriteTo(writer);
                }
            }

            WarBender.GameData.Item _field__item_0;
            public override WarBender.GameData.Item item_0
            {
                get => _field__item_0;
                set
                {
                    SetProperty("item_0", ref _field__item_0, value);
                }
            }

            WarBender.GameData.Item _field__item_1;
            public override WarBender.GameData.Item item_1
            {
                get => _field__item_1;
                set
                {
                    SetProperty("item_1", ref _field__item_1, value);
                }
            }

            WarBender.GameData.Item _field__item_2;
            public override WarBender.GameData.Item item_2
            {
                get => _field__item_2;
                set
                {
                    SetProperty("item_2", ref _field__item_2, value);
                }
            }

            WarBender.GameData.Item _field__item_3;
            public override WarBender.GameData.Item item_3
            {
                get => _field__item_3;
                set
                {
                    SetProperty("item_3", ref _field__item_3, value);
                }
            }

            WarBender.GameData.Item _field__head;
            public override WarBender.GameData.Item head
            {
                get => _field__head;
                set
                {
                    SetProperty("head", ref _field__head, value);
                }
            }

            WarBender.GameData.Item _field__body;
            public override WarBender.GameData.Item body
            {
                get => _field__body;
                set
                {
                    SetProperty("body", ref _field__body, value);
                }
            }

            WarBender.GameData.Item _field__foot;
            public override WarBender.GameData.Item foot
            {
                get => _field__foot;
                set
                {
                    SetProperty("foot", ref _field__foot, value);
                }
            }

            WarBender.GameData.Item _field__gloves;
            public override WarBender.GameData.Item gloves
            {
                get => _field__gloves;
                set
                {
                    SetProperty("gloves", ref _field__gloves, value);
                }
            }

            WarBender.GameData.Item _field__horse;
            public override WarBender.GameData.Item horse
            {
                get => _field__horse;
                set
                {
                    SetProperty("horse", ref _field__horse, value);
                }
            }

            WarBender.GameData.Item _field__food;
            public override WarBender.GameData.Item food
            {
                get => _field__food;
                set
                {
                    SetProperty("food", ref _field__food, value);
                }
            }

            public _Impl()
            {
                item_0 = default;
                item_1 = default;
                item_2 = default;
                item_3 = default;
                head = default;
                body = default;
                foot = default;
                gloves = default;
                horse = default;
                food = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.EquippedItems>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.EquippedItems IDataObjectFactory<WarBender.GameData.EquippedItems>.Create() => WarBender.GameData.EquippedItems.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Inventory
    {
        public static WarBender.GameData.Inventory Create() => new _Impl();
        private class _Impl : WarBender.GameData.Inventory
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.gold = ValueSerializers._uint.Read(reader);
                }
                else
                {
                    this.gold = default;
                }

                if (true)
                {
                    this.experience = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.experience = default;
                }

                if (true)
                {
                    this.health = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.health = default;
                }

                if (true)
                {
                    this.faction_id = ValueSerializers._WarBender_EntityReference_WarBender_GameData_Faction_.Read(reader);
                }
                else
                {
                    this.faction_id = default;
                }

                if (true)
                {
                    this.inventory_items.ReadFrom(reader);
                }
                else
                {
                    this.inventory_items.Clear();
                }

                if (true)
                {
                    this.equipped_items = this.equipped_items ?? WarBender.GameData.EquippedItems.Create();
                    this.equipped_items.ReadFrom(reader);
                }
                else
                {
                    this.equipped_items = default;
                }

                if (true)
                {
                    this.face_keys.ReadFrom(reader);
                }
                else
                {
                    this.face_keys.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._uint.Write(writer, this.gold);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.experience);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.health);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_GameData_Faction_.Write(writer, this.faction_id);
                }

                if (true)
                {
                    this.inventory_items.WriteTo(writer);
                }

                if (true)
                {
                    this.equipped_items.WriteTo(writer);
                }

                if (true)
                {
                    this.face_keys.WriteTo(writer);
                }
            }

            uint _field__gold;
            public override uint gold
            {
                get => _field__gold;
                set
                {
                    SetProperty("gold", ref _field__gold, value);
                }
            }

            int _field__experience;
            public override int experience
            {
                get => _field__experience;
                set
                {
                    SetProperty("experience", ref _field__experience, value);
                }
            }

            float _field__health;
            public override float health
            {
                get => _field__health;
                set
                {
                    SetProperty("health", ref _field__health, value);
                }
            }

            WarBender.EntityReference<WarBender.GameData.Faction> _field__faction_id;
            public override WarBender.EntityReference<WarBender.GameData.Faction> faction_id
            {
                get => _field__faction_id;
                set
                {
                    SetProperty("faction_id", ref _field__faction_id, value);
                }
            }

            WarBender.GameData.EquippedItems _field__equipped_items;
            public override WarBender.GameData.EquippedItems equipped_items
            {
                get => _field__equipped_items;
                set
                {
                    SetProperty("equipped_items", ref _field__equipped_items, value);
                }
            }

            public _Impl()
            {
                faction_id = default;
                (inventory_items as IDataObjectChild)?.WithParent(this, -1);
                equipped_items = default;
                (face_keys as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Inventory>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Inventory IDataObjectFactory<WarBender.GameData.Inventory>.Create() => WarBender.GameData.Inventory.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Attributes
    {
        public static WarBender.GameData.Attributes Create() => new _Impl();
        private class _Impl : WarBender.GameData.Attributes
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.strength = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.strength = default;
                }

                if (true)
                {
                    this.agility = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.agility = default;
                }

                if (true)
                {
                    this.intelligence = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.intelligence = default;
                }

                if (true)
                {
                    this.charisma = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.charisma = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.strength);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.agility);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.intelligence);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.charisma);
                }
            }

            int _field__strength;
            public override int strength
            {
                get => _field__strength;
                set
                {
                    SetProperty("strength", ref _field__strength, value);
                }
            }

            int _field__agility;
            public override int agility
            {
                get => _field__agility;
                set
                {
                    SetProperty("agility", ref _field__agility, value);
                }
            }

            int _field__intelligence;
            public override int intelligence
            {
                get => _field__intelligence;
                set
                {
                    SetProperty("intelligence", ref _field__intelligence, value);
                }
            }

            int _field__charisma;
            public override int charisma
            {
                get => _field__charisma;
                set
                {
                    SetProperty("charisma", ref _field__charisma, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Attributes>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Attributes IDataObjectFactory<WarBender.GameData.Attributes>.Create() => WarBender.GameData.Attributes.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Proficiencies
    {
        public static WarBender.GameData.Proficiencies Create() => new _Impl();
        private class _Impl : WarBender.GameData.Proficiencies
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.one_handed_weapon = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.one_handed_weapon = default;
                }

                if (true)
                {
                    this.two_handed_weapon = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.two_handed_weapon = default;
                }

                if (true)
                {
                    this.polearm = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.polearm = default;
                }

                if (true)
                {
                    this.archery = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.archery = default;
                }

                if (true)
                {
                    this.crossbow = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.crossbow = default;
                }

                if (true)
                {
                    this.throwing = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.throwing = default;
                }

                if (true)
                {
                    this.firearm = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.firearm = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._float.Write(writer, this.one_handed_weapon);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.two_handed_weapon);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.polearm);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.archery);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.crossbow);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.throwing);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.firearm);
                }
            }

            float _field__one_handed_weapon;
            public override float one_handed_weapon
            {
                get => _field__one_handed_weapon;
                set
                {
                    SetProperty("one_handed_weapon", ref _field__one_handed_weapon, value);
                }
            }

            float _field__two_handed_weapon;
            public override float two_handed_weapon
            {
                get => _field__two_handed_weapon;
                set
                {
                    SetProperty("two_handed_weapon", ref _field__two_handed_weapon, value);
                }
            }

            float _field__polearm;
            public override float polearm
            {
                get => _field__polearm;
                set
                {
                    SetProperty("polearm", ref _field__polearm, value);
                }
            }

            float _field__archery;
            public override float archery
            {
                get => _field__archery;
                set
                {
                    SetProperty("archery", ref _field__archery, value);
                }
            }

            float _field__crossbow;
            public override float crossbow
            {
                get => _field__crossbow;
                set
                {
                    SetProperty("crossbow", ref _field__crossbow, value);
                }
            }

            float _field__throwing;
            public override float throwing
            {
                get => _field__throwing;
                set
                {
                    SetProperty("throwing", ref _field__throwing, value);
                }
            }

            float _field__firearm;
            public override float firearm
            {
                get => _field__firearm;
                set
                {
                    SetProperty("firearm", ref _field__firearm, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Proficiencies>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Proficiencies IDataObjectFactory<WarBender.GameData.Proficiencies>.Create() => WarBender.GameData.Proficiencies.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Skills
    {
        public static WarBender.GameData.Skills Create() => new _Impl();
        private class _Impl : WarBender.GameData.Skills
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    bitFieldReader.Start(reader);
                    this.trade = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.trade = default;
                }

                if (true)
                {
                    this.leadership = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.leadership = default;
                }

                if (true)
                {
                    this.prisoner_management = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.prisoner_management = default;
                }

                if (true)
                {
                    this.reserved_1 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_1 = default;
                }

                if (true)
                {
                    this.reserved_2 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_2 = default;
                }

                if (true)
                {
                    this.reserved_3 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_3 = default;
                }

                if (true)
                {
                    this.reserved_4 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_4 = default;
                }

                if (true)
                {
                    this.persuasion = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.persuasion = default;
                }

                if (true)
                {
                    this.engineer = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.engineer = default;
                }

                if (true)
                {
                    this.first_aid = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.first_aid = default;
                }

                if (true)
                {
                    this.surgery = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.surgery = default;
                }

                if (true)
                {
                    this.wound_treatment = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.wound_treatment = default;
                }

                if (true)
                {
                    this.inventory_management = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.inventory_management = default;
                }

                if (true)
                {
                    this.spotting = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.spotting = default;
                }

                if (true)
                {
                    this.pathfinding = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.pathfinding = default;
                }

                if (true)
                {
                    this.tactics = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.tactics = default;
                }

                if (true)
                {
                    this.tracking = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.tracking = default;
                }

                if (true)
                {
                    this.trainer = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.trainer = default;
                }

                if (true)
                {
                    this.reserved_5 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_5 = default;
                }

                if (true)
                {
                    this.reserved_6 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_6 = default;
                }

                if (true)
                {
                    this.reserved_7 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_7 = default;
                }

                if (true)
                {
                    this.reserved_8 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_8 = default;
                }

                if (true)
                {
                    this.looting = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.looting = default;
                }

                if (true)
                {
                    this.horse_archery = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.horse_archery = default;
                }

                if (true)
                {
                    this.riding = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.riding = default;
                }

                if (true)
                {
                    this.athletics = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.athletics = default;
                }

                if (true)
                {
                    this.shield = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.shield = default;
                }

                if (true)
                {
                    this.weapon_master = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.weapon_master = default;
                }

                if (true)
                {
                    this.reserved_9 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_9 = default;
                }

                if (true)
                {
                    this.reserved_10 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_10 = default;
                }

                if (true)
                {
                    this.reserved_11 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_11 = default;
                }

                if (true)
                {
                    this.reserved_12 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_12 = default;
                }

                if (true)
                {
                    this.reserved_13 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_13 = default;
                }

                if (true)
                {
                    this.power_draw = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.power_draw = default;
                }

                if (true)
                {
                    this.power_throw = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.power_throw = default;
                }

                if (true)
                {
                    this.power_strike = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.power_strike = default;
                }

                if (true)
                {
                    this.ironflesh = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.ironflesh = default;
                }

                if (true)
                {
                    this.reserved_14 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_14 = default;
                }

                if (true)
                {
                    this.reserved_15 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_15 = default;
                }

                if (true)
                {
                    this.reserved_16 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_16 = default;
                }

                if (true)
                {
                    this.reserved_17 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_17 = default;
                }

                if (true)
                {
                    this.reserved_18 = (System.Byte)bitFieldReader.ReadField(4);
                }
                else
                {
                    this.reserved_18 = default;
                }

                if (true)
                {
                    this._1.ReadFrom(reader);
                }
                else
                {
                    this._1.Clear();
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    bitFieldWriter.Start(writer);
                    bitFieldWriter.WriteField(4, (ulong)this.trade);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.leadership);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.prisoner_management);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_1);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_2);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_3);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_4);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.persuasion);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.engineer);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.first_aid);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.surgery);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.wound_treatment);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.inventory_management);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.spotting);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.pathfinding);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.tactics);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.tracking);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.trainer);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_5);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_6);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_7);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_8);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.looting);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.horse_archery);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.riding);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.athletics);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.shield);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.weapon_master);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_9);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_10);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_11);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_12);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_13);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.power_draw);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.power_throw);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.power_strike);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.ironflesh);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_14);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_15);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_16);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_17);
                }

                if (true)
                {
                    bitFieldWriter.WriteField(4, (ulong)this.reserved_18);
                }

                if (true)
                {
                    this._1.WriteTo(writer);
                }
            }

            byte _field__trade;
            public override byte trade
            {
                get => _field__trade;
                set
                {
                    SetProperty("trade", ref _field__trade, value);
                }
            }

            byte _field__leadership;
            public override byte leadership
            {
                get => _field__leadership;
                set
                {
                    SetProperty("leadership", ref _field__leadership, value);
                }
            }

            byte _field__prisoner_management;
            public override byte prisoner_management
            {
                get => _field__prisoner_management;
                set
                {
                    SetProperty("prisoner_management", ref _field__prisoner_management, value);
                }
            }

            byte _field__reserved_1;
            public override byte reserved_1
            {
                get => _field__reserved_1;
                set
                {
                    SetProperty("reserved_1", ref _field__reserved_1, value);
                }
            }

            byte _field__reserved_2;
            public override byte reserved_2
            {
                get => _field__reserved_2;
                set
                {
                    SetProperty("reserved_2", ref _field__reserved_2, value);
                }
            }

            byte _field__reserved_3;
            public override byte reserved_3
            {
                get => _field__reserved_3;
                set
                {
                    SetProperty("reserved_3", ref _field__reserved_3, value);
                }
            }

            byte _field__reserved_4;
            public override byte reserved_4
            {
                get => _field__reserved_4;
                set
                {
                    SetProperty("reserved_4", ref _field__reserved_4, value);
                }
            }

            byte _field__persuasion;
            public override byte persuasion
            {
                get => _field__persuasion;
                set
                {
                    SetProperty("persuasion", ref _field__persuasion, value);
                }
            }

            byte _field__engineer;
            public override byte engineer
            {
                get => _field__engineer;
                set
                {
                    SetProperty("engineer", ref _field__engineer, value);
                }
            }

            byte _field__first_aid;
            public override byte first_aid
            {
                get => _field__first_aid;
                set
                {
                    SetProperty("first_aid", ref _field__first_aid, value);
                }
            }

            byte _field__surgery;
            public override byte surgery
            {
                get => _field__surgery;
                set
                {
                    SetProperty("surgery", ref _field__surgery, value);
                }
            }

            byte _field__wound_treatment;
            public override byte wound_treatment
            {
                get => _field__wound_treatment;
                set
                {
                    SetProperty("wound_treatment", ref _field__wound_treatment, value);
                }
            }

            byte _field__inventory_management;
            public override byte inventory_management
            {
                get => _field__inventory_management;
                set
                {
                    SetProperty("inventory_management", ref _field__inventory_management, value);
                }
            }

            byte _field__spotting;
            public override byte spotting
            {
                get => _field__spotting;
                set
                {
                    SetProperty("spotting", ref _field__spotting, value);
                }
            }

            byte _field__pathfinding;
            public override byte pathfinding
            {
                get => _field__pathfinding;
                set
                {
                    SetProperty("pathfinding", ref _field__pathfinding, value);
                }
            }

            byte _field__tactics;
            public override byte tactics
            {
                get => _field__tactics;
                set
                {
                    SetProperty("tactics", ref _field__tactics, value);
                }
            }

            byte _field__tracking;
            public override byte tracking
            {
                get => _field__tracking;
                set
                {
                    SetProperty("tracking", ref _field__tracking, value);
                }
            }

            byte _field__trainer;
            public override byte trainer
            {
                get => _field__trainer;
                set
                {
                    SetProperty("trainer", ref _field__trainer, value);
                }
            }

            byte _field__reserved_5;
            public override byte reserved_5
            {
                get => _field__reserved_5;
                set
                {
                    SetProperty("reserved_5", ref _field__reserved_5, value);
                }
            }

            byte _field__reserved_6;
            public override byte reserved_6
            {
                get => _field__reserved_6;
                set
                {
                    SetProperty("reserved_6", ref _field__reserved_6, value);
                }
            }

            byte _field__reserved_7;
            public override byte reserved_7
            {
                get => _field__reserved_7;
                set
                {
                    SetProperty("reserved_7", ref _field__reserved_7, value);
                }
            }

            byte _field__reserved_8;
            public override byte reserved_8
            {
                get => _field__reserved_8;
                set
                {
                    SetProperty("reserved_8", ref _field__reserved_8, value);
                }
            }

            byte _field__looting;
            public override byte looting
            {
                get => _field__looting;
                set
                {
                    SetProperty("looting", ref _field__looting, value);
                }
            }

            byte _field__horse_archery;
            public override byte horse_archery
            {
                get => _field__horse_archery;
                set
                {
                    SetProperty("horse_archery", ref _field__horse_archery, value);
                }
            }

            byte _field__riding;
            public override byte riding
            {
                get => _field__riding;
                set
                {
                    SetProperty("riding", ref _field__riding, value);
                }
            }

            byte _field__athletics;
            public override byte athletics
            {
                get => _field__athletics;
                set
                {
                    SetProperty("athletics", ref _field__athletics, value);
                }
            }

            byte _field__shield;
            public override byte shield
            {
                get => _field__shield;
                set
                {
                    SetProperty("shield", ref _field__shield, value);
                }
            }

            byte _field__weapon_master;
            public override byte weapon_master
            {
                get => _field__weapon_master;
                set
                {
                    SetProperty("weapon_master", ref _field__weapon_master, value);
                }
            }

            byte _field__reserved_9;
            public override byte reserved_9
            {
                get => _field__reserved_9;
                set
                {
                    SetProperty("reserved_9", ref _field__reserved_9, value);
                }
            }

            byte _field__reserved_10;
            public override byte reserved_10
            {
                get => _field__reserved_10;
                set
                {
                    SetProperty("reserved_10", ref _field__reserved_10, value);
                }
            }

            byte _field__reserved_11;
            public override byte reserved_11
            {
                get => _field__reserved_11;
                set
                {
                    SetProperty("reserved_11", ref _field__reserved_11, value);
                }
            }

            byte _field__reserved_12;
            public override byte reserved_12
            {
                get => _field__reserved_12;
                set
                {
                    SetProperty("reserved_12", ref _field__reserved_12, value);
                }
            }

            byte _field__reserved_13;
            public override byte reserved_13
            {
                get => _field__reserved_13;
                set
                {
                    SetProperty("reserved_13", ref _field__reserved_13, value);
                }
            }

            byte _field__power_draw;
            public override byte power_draw
            {
                get => _field__power_draw;
                set
                {
                    SetProperty("power_draw", ref _field__power_draw, value);
                }
            }

            byte _field__power_throw;
            public override byte power_throw
            {
                get => _field__power_throw;
                set
                {
                    SetProperty("power_throw", ref _field__power_throw, value);
                }
            }

            byte _field__power_strike;
            public override byte power_strike
            {
                get => _field__power_strike;
                set
                {
                    SetProperty("power_strike", ref _field__power_strike, value);
                }
            }

            byte _field__ironflesh;
            public override byte ironflesh
            {
                get => _field__ironflesh;
                set
                {
                    SetProperty("ironflesh", ref _field__ironflesh, value);
                }
            }

            byte _field__reserved_14;
            public override byte reserved_14
            {
                get => _field__reserved_14;
                set
                {
                    SetProperty("reserved_14", ref _field__reserved_14, value);
                }
            }

            byte _field__reserved_15;
            public override byte reserved_15
            {
                get => _field__reserved_15;
                set
                {
                    SetProperty("reserved_15", ref _field__reserved_15, value);
                }
            }

            byte _field__reserved_16;
            public override byte reserved_16
            {
                get => _field__reserved_16;
                set
                {
                    SetProperty("reserved_16", ref _field__reserved_16, value);
                }
            }

            byte _field__reserved_17;
            public override byte reserved_17
            {
                get => _field__reserved_17;
                set
                {
                    SetProperty("reserved_17", ref _field__reserved_17, value);
                }
            }

            byte _field__reserved_18;
            public override byte reserved_18
            {
                get => _field__reserved_18;
                set
                {
                    SetProperty("reserved_18", ref _field__reserved_18, value);
                }
            }

            public _Impl()
            {
                (_1 as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Skills>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Skills IDataObjectFactory<WarBender.GameData.Skills>.Create() => WarBender.GameData.Skills.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class Troop
    {
        public static WarBender.GameData.Troop Create() => new _Impl();
        private class _Impl : WarBender.GameData.Troop
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.slots.ReadFrom(reader);
                }
                else
                {
                    this.slots.Clear();
                }

                if (true)
                {
                    this.attributes = this.attributes ?? WarBender.GameData.Attributes.Create();
                    this.attributes.ReadFrom(reader);
                }
                else
                {
                    this.attributes = default;
                }

                if (true)
                {
                    this.proficiencies = this.proficiencies ?? WarBender.GameData.Proficiencies.Create();
                    this.proficiencies.ReadFrom(reader);
                }
                else
                {
                    this.proficiencies = default;
                }

                if (true)
                {
                    this.skills = this.skills ?? WarBender.GameData.Skills.Create();
                    this.skills.ReadFrom(reader);
                }
                else
                {
                    this.skills = default;
                }

                if (true)
                {
                    this.notes.ReadFrom(reader);
                }
                else
                {
                    this.notes.Clear();
                }

                if (true)
                {
                    this.flags = ValueSerializers._WarBender_GameData_TroopFlags.Read(reader);
                }
                else
                {
                    this.flags = default;
                }

                if (true)
                {
                    this.site_id_and_entry_no = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.site_id_and_entry_no = default;
                }

                if (true)
                {
                    this.skill_points = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.skill_points = default;
                }

                if (true)
                {
                    this.attribute_points = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.attribute_points = default;
                }

                if (true)
                {
                    this.proficiency_points = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.proficiency_points = default;
                }

                if (true)
                {
                    this.level = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.level = default;
                }

                if (true && this.has_inventory())
                {
                    this.inventory = this.inventory ?? WarBender.GameData.Inventory.Create();
                    this.inventory.ReadFrom(reader);
                }
                else
                {
                    this.inventory = default;
                }

                if (true && this.has_inventory())
                {
                    this.renamed = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this.renamed = default;
                }

                if (true && this.renamed)
                {
                    this.name = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.name = default;
                }

                if (true && this.renamed)
                {
                    this.name_plural = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.name_plural = default;
                }

                if (true)
                {
                    this.class_no = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.class_no = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.slots.WriteTo(writer);
                }

                if (true)
                {
                    this.attributes.WriteTo(writer);
                }

                if (true)
                {
                    this.proficiencies.WriteTo(writer);
                }

                if (true)
                {
                    this.skills.WriteTo(writer);
                }

                if (true)
                {
                    this.notes.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._WarBender_GameData_TroopFlags.Write(writer, this.flags);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.site_id_and_entry_no);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.skill_points);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.attribute_points);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.proficiency_points);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.level);
                }

                if (true && this.has_inventory())
                {
                    this.inventory.WriteTo(writer);
                }

                if (true && this.has_inventory())
                {
                    ValueSerializers._bool.Write(writer, this.renamed);
                }

                if (true && this.renamed)
                {
                    ValueSerializers._string.Write(writer, this.name);
                }

                if (true && this.renamed)
                {
                    ValueSerializers._string.Write(writer, this.name_plural);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.class_no);
                }
            }

            WarBender.GameData.Attributes _field__attributes;
            public override WarBender.GameData.Attributes attributes
            {
                get => _field__attributes;
                set
                {
                    SetProperty("attributes", ref _field__attributes, value);
                }
            }

            WarBender.GameData.Proficiencies _field__proficiencies;
            public override WarBender.GameData.Proficiencies proficiencies
            {
                get => _field__proficiencies;
                set
                {
                    SetProperty("proficiencies", ref _field__proficiencies, value);
                }
            }

            WarBender.GameData.Skills _field__skills;
            public override WarBender.GameData.Skills skills
            {
                get => _field__skills;
                set
                {
                    SetProperty("skills", ref _field__skills, value);
                }
            }

            WarBender.GameData.TroopFlags _field__flags;
            public override WarBender.GameData.TroopFlags flags
            {
                get => _field__flags;
                set
                {
                    SetProperty("flags", ref _field__flags, value);
                }
            }

            int _field__site_id_and_entry_no;
            public override int site_id_and_entry_no
            {
                get => _field__site_id_and_entry_no;
                set
                {
                    SetProperty("site_id_and_entry_no", ref _field__site_id_and_entry_no, value);
                }
            }

            int _field__skill_points;
            public override int skill_points
            {
                get => _field__skill_points;
                set
                {
                    SetProperty("skill_points", ref _field__skill_points, value);
                }
            }

            int _field__attribute_points;
            public override int attribute_points
            {
                get => _field__attribute_points;
                set
                {
                    SetProperty("attribute_points", ref _field__attribute_points, value);
                }
            }

            int _field__proficiency_points;
            public override int proficiency_points
            {
                get => _field__proficiency_points;
                set
                {
                    SetProperty("proficiency_points", ref _field__proficiency_points, value);
                }
            }

            int _field__level;
            public override int level
            {
                get => _field__level;
                set
                {
                    SetProperty("level", ref _field__level, value);
                }
            }

            WarBender.GameData.Inventory _field__inventory;
            public override WarBender.GameData.Inventory inventory
            {
                get => _field__inventory;
                set
                {
                    SetProperty("inventory", ref _field__inventory, value);
                }
            }

            bool _field__renamed;
            public override bool renamed
            {
                get => _field__renamed;
                set
                {
                    SetProperty("renamed", ref _field__renamed, value);
                }
            }

            string _field__name;
            public override string name
            {
                get => _field__name;
                set
                {
                    SetProperty("name", ref _field__name, value);
                }
            }

            string _field__name_plural;
            public override string name_plural
            {
                get => _field__name_plural;
                set
                {
                    SetProperty("name_plural", ref _field__name_plural, value);
                }
            }

            int _field__class_no;
            public override int class_no
            {
                get => _field__class_no;
                set
                {
                    SetProperty("class_no", ref _field__class_no, value);
                }
            }

            public _Impl()
            {
                (slots as IDataObjectChild)?.WithParent(this, -1);
                attributes = default;
                proficiencies = default;
                skills = default;
                (notes as IDataObjectChild)?.WithParent(this, -1);
                inventory = default;
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.Troop>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.Troop IDataObjectFactory<WarBender.GameData.Troop>.Create() => WarBender.GameData.Troop.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class GameHeader
    {
        public static WarBender.GameData.GameHeader Create() => new _Impl();
        private class _Impl : WarBender.GameData.GameHeader
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.magic_number = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.magic_number = default;
                }

                if (true)
                {
                    this.game_version = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.game_version = default;
                }

                if (true)
                {
                    this.module_version = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.module_version = default;
                }

                if (true)
                {
                    this.savegame_name = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.savegame_name = default;
                }

                if (true)
                {
                    this.player_name = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.player_name = default;
                }

                if (true)
                {
                    this.player_level = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.player_level = default;
                }

                if (true)
                {
                    this.date = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.date = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    ValueSerializers._int.Write(writer, this.magic_number);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.game_version);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.module_version);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.savegame_name);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.player_name);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.player_level);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.date);
                }
            }

            int _field__magic_number;
            public override int magic_number
            {
                get => _field__magic_number;
                set
                {
                    SetProperty("magic_number", ref _field__magic_number, value);
                }
            }

            int _field__game_version;
            public override int game_version
            {
                get => _field__game_version;
                set
                {
                    SetProperty("game_version", ref _field__game_version, value);
                }
            }

            int _field__module_version;
            public override int module_version
            {
                get => _field__module_version;
                set
                {
                    SetProperty("module_version", ref _field__module_version, value);
                }
            }

            string _field__savegame_name;
            public override string savegame_name
            {
                get => _field__savegame_name;
                set
                {
                    SetProperty("savegame_name", ref _field__savegame_name, value);
                }
            }

            string _field__player_name;
            public override string player_name
            {
                get => _field__player_name;
                set
                {
                    SetProperty("player_name", ref _field__player_name, value);
                }
            }

            int _field__player_level;
            public override int player_level
            {
                get => _field__player_level;
                set
                {
                    SetProperty("player_level", ref _field__player_level, value);
                }
            }

            float _field__date;
            public override float date
            {
                get => _field__date;
                set
                {
                    SetProperty("date", ref _field__date, value);
                }
            }

            public _Impl()
            {
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.GameHeader>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.GameHeader IDataObjectFactory<WarBender.GameData.GameHeader>.Create() => WarBender.GameData.GameHeader.Create();
    }
}

namespace WarBender.GameData
{
    [GeneratedCode("", "")]
    partial class SavedGame
    {
        public static WarBender.GameData.SavedGame Create() => new _Impl();
        private class _Impl : WarBender.GameData.SavedGame
        {
            protected override void ReadFields(BinaryReader reader)
            {
                var game = this.Game();
                var bitFieldReader = new BitFieldReader();
                if (true)
                {
                    this.header = this.header ?? WarBender.GameData.GameHeader.Create();
                    this.header.ReadFrom(reader);
                }
                else
                {
                    this.header = default;
                }

                if (true)
                {
                    this.game_time = ValueSerializers._ulong.Read(reader);
                }
                else
                {
                    this.game_time = default;
                }

                if (true)
                {
                    this.random_seed = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.random_seed = default;
                }

                if (true)
                {
                    this.save_mode = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.save_mode = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.combat_difficulty = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.combat_difficulty = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.combat_difficulty_friendlies = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.combat_difficulty_friendlies = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.reduce_combat_ai = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.reduce_combat_ai = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.reduce_campaign_ai = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.reduce_campaign_ai = default;
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    this.combat_speed = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.combat_speed = default;
                }

                if (true)
                {
                    this.date_timer = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this.date_timer = default;
                }

                if (true)
                {
                    this.hour = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.hour = default;
                }

                if (true)
                {
                    this.day = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.day = default;
                }

                if (true)
                {
                    this.week = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.week = default;
                }

                if (true)
                {
                    this.month = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.month = default;
                }

                if (true)
                {
                    this.year = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.year = default;
                }

                if (true)
                {
                    this._1 = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this._1 = default;
                }

                if (true)
                {
                    this.global_cloud_amount = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.global_cloud_amount = default;
                }

                if (true)
                {
                    this.global_haze_amount = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.global_haze_amount = default;
                }

                if (true)
                {
                    this.average_difficulty = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.average_difficulty = default;
                }

                if (true)
                {
                    this.average_difficulty_period = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.average_difficulty_period = default;
                }

                if (true)
                {
                    this._2 = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this._2 = default;
                }

                if (true)
                {
                    this._3 = ValueSerializers._bool.Read(reader);
                }
                else
                {
                    this._3 = default;
                }

                if (true)
                {
                    this.tutorial_flags = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.tutorial_flags = default;
                }

                if (true)
                {
                    this.default_prisoner_price = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.default_prisoner_price = default;
                }

                if (true)
                {
                    this.encountered_party_1_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.encountered_party_1_id = default;
                }

                if (true)
                {
                    this.encountered_party_2_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.encountered_party_2_id = default;
                }

                if (true)
                {
                    this.current_menu_id = ValueSerializers._WarBender_EntityReference_WarBender_Modules_MenuDefinition_.Read(reader);
                }
                else
                {
                    this.current_menu_id = default;
                }

                if (true)
                {
                    this.current_site_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.current_site_id = default;
                }

                if (true)
                {
                    this.current_entry_no = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.current_entry_no = default;
                }

                if (true)
                {
                    this.current_mission_template_id = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.current_mission_template_id = default;
                }

                if (true)
                {
                    this.party_creation_min_random_value = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.party_creation_min_random_value = default;
                }

                if (true)
                {
                    this.party_creation_max_random_value = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.party_creation_max_random_value = default;
                }

                if (true)
                {
                    this.game_log = ValueSerializers._string.Read(reader);
                }
                else
                {
                    this.game_log = default;
                }

                if (true)
                {
                    this._4.ReadFrom(reader);
                }
                else
                {
                    this._4.Clear();
                }

                if (true)
                {
                    this._5 = ValueSerializers._long.Read(reader);
                }
                else
                {
                    this._5 = default;
                }

                if (true)
                {
                    this.rest_period = ValueSerializers._float.Read(reader);
                }
                else
                {
                    this.rest_period = default;
                }

                if (true)
                {
                    this.rest_time_speed = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.rest_time_speed = default;
                }

                if (true)
                {
                    this.rest_is_interactive = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.rest_is_interactive = default;
                }

                if (true)
                {
                    this.rest_remain_attackable = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.rest_remain_attackable = default;
                }

                if (true)
                {
                    this.class_names.ReadFrom(reader);
                }
                else
                {
                    this.class_names.Clear();
                }

                if (true)
                {
                    this.global_variables.ReadFrom(reader);
                }
                else
                {
                    this.global_variables.Clear();
                }

                if (true)
                {
                    this.triggers.ReadFrom(reader);
                }
                else
                {
                    this.triggers.Clear();
                }

                if (true)
                {
                    this.simple_triggers.ReadFrom(reader);
                }
                else
                {
                    this.simple_triggers.Clear();
                }

                if (true)
                {
                    this.quests.ReadFrom(reader);
                }
                else
                {
                    this.quests.Clear();
                }

                if (true)
                {
                    this.info_pages.ReadFrom(reader);
                }
                else
                {
                    this.info_pages.Clear();
                }

                if (true)
                {
                    this.scenes.ReadFrom(reader);
                }
                else
                {
                    this.scenes.Clear();
                }

                if (true)
                {
                    this.factions.ReadFrom(reader);
                }
                else
                {
                    this.factions.Clear();
                }

                if (true)
                {
                    this.map_tracks.ReadFrom(reader);
                }
                else
                {
                    this.map_tracks.Clear();
                }

                if (true)
                {
                    this.party_templates.ReadFrom(reader);
                }
                else
                {
                    this.party_templates.Clear();
                }

                if (true)
                {
                    this.parties.ReadFrom(reader);
                }
                else
                {
                    this.parties.Clear();
                }

                if (true)
                {
                    this.player_party_troop_stacks.ReadFrom(reader);
                }
                else
                {
                    this.player_party_troop_stacks.Clear();
                }

                if (true)
                {
                    this.map_events.ReadFrom(reader);
                }
                else
                {
                    this.map_events.Clear();
                }

                if (true)
                {
                    this.troops.ReadFrom(reader);
                }
                else
                {
                    this.troops.Clear();
                }

                if (true)
                {
                    this._6.ReadFrom(reader);
                }
                else
                {
                    this._6.Clear();
                }

                if (true)
                {
                    this.item_kinds.ReadFrom(reader);
                }
                else
                {
                    this.item_kinds.Clear();
                }

                if (true)
                {
                    this.player_face_keys0 = ValueSerializers._ulong.Read(reader);
                }
                else
                {
                    this.player_face_keys0 = default;
                }

                if (true)
                {
                    this.player_face_keys1 = ValueSerializers._ulong.Read(reader);
                }
                else
                {
                    this.player_face_keys1 = default;
                }

                if (true)
                {
                    this.player_kill_count = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.player_kill_count = default;
                }

                if (true)
                {
                    this.player_wounded_count = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.player_wounded_count = default;
                }

                if (true)
                {
                    this.player_own_troop_kill_count = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.player_own_troop_kill_count = default;
                }

                if (true)
                {
                    this.player_own_troop_wounded_count = ValueSerializers._int.Read(reader);
                }
                else
                {
                    this.player_own_troop_wounded_count = default;
                }
            }

            protected override void WriteFields(BinaryWriter writer)
            {
                var game = this.Game();
                var bitFieldWriter = new BitFieldWriter();
                if (true)
                {
                    this.header.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._ulong.Write(writer, this.game_time);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.random_seed);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.save_mode);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.combat_difficulty);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.combat_difficulty_friendlies);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.reduce_combat_ai);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.reduce_campaign_ai);
                }

                if (true && game.MatchVersions(1137, 2147483647))
                {
                    ValueSerializers._int.Write(writer, this.combat_speed);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this.date_timer);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.hour);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.day);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.week);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.month);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.year);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this._1);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.global_cloud_amount);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.global_haze_amount);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.average_difficulty);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.average_difficulty_period);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this._2);
                }

                if (true)
                {
                    ValueSerializers._bool.Write(writer, this._3);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.tutorial_flags);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.default_prisoner_price);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.encountered_party_1_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.encountered_party_2_id);
                }

                if (true)
                {
                    ValueSerializers._WarBender_EntityReference_WarBender_Modules_MenuDefinition_.Write(writer, this.current_menu_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.current_site_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.current_entry_no);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.current_mission_template_id);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.party_creation_min_random_value);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.party_creation_max_random_value);
                }

                if (true)
                {
                    ValueSerializers._string.Write(writer, this.game_log);
                }

                if (true)
                {
                    this._4.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._long.Write(writer, this._5);
                }

                if (true)
                {
                    ValueSerializers._float.Write(writer, this.rest_period);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.rest_time_speed);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.rest_is_interactive);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.rest_remain_attackable);
                }

                if (true)
                {
                    this.class_names.WriteTo(writer);
                }

                if (true)
                {
                    this.global_variables.WriteTo(writer);
                }

                if (true)
                {
                    this.triggers.WriteTo(writer);
                }

                if (true)
                {
                    this.simple_triggers.WriteTo(writer);
                }

                if (true)
                {
                    this.quests.WriteTo(writer);
                }

                if (true)
                {
                    this.info_pages.WriteTo(writer);
                }

                if (true)
                {
                    this.scenes.WriteTo(writer);
                }

                if (true)
                {
                    this.factions.WriteTo(writer);
                }

                if (true)
                {
                    this.map_tracks.WriteTo(writer);
                }

                if (true)
                {
                    this.party_templates.WriteTo(writer);
                }

                if (true)
                {
                    this.parties.WriteTo(writer);
                }

                if (true)
                {
                    this.player_party_troop_stacks.WriteTo(writer);
                }

                if (true)
                {
                    this.map_events.WriteTo(writer);
                }

                if (true)
                {
                    this.troops.WriteTo(writer);
                }

                if (true)
                {
                    this._6.WriteTo(writer);
                }

                if (true)
                {
                    this.item_kinds.WriteTo(writer);
                }

                if (true)
                {
                    ValueSerializers._ulong.Write(writer, this.player_face_keys0);
                }

                if (true)
                {
                    ValueSerializers._ulong.Write(writer, this.player_face_keys1);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.player_kill_count);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.player_wounded_count);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.player_own_troop_kill_count);
                }

                if (true)
                {
                    ValueSerializers._int.Write(writer, this.player_own_troop_wounded_count);
                }
            }

            WarBender.GameData.GameHeader _field__header;
            public override WarBender.GameData.GameHeader header
            {
                get => _field__header;
                set
                {
                    SetProperty("header", ref _field__header, value);
                }
            }

            ulong _field__game_time;
            public override ulong game_time
            {
                get => _field__game_time;
                set
                {
                    SetProperty("game_time", ref _field__game_time, value);
                }
            }

            int _field__random_seed;
            public override int random_seed
            {
                get => _field__random_seed;
                set
                {
                    SetProperty("random_seed", ref _field__random_seed, value);
                }
            }

            int _field__save_mode;
            public override int save_mode
            {
                get => _field__save_mode;
                set
                {
                    SetProperty("save_mode", ref _field__save_mode, value);
                }
            }

            int _field__combat_difficulty;
            public override int combat_difficulty
            {
                get => _field__combat_difficulty;
                set
                {
                    SetProperty("combat_difficulty", ref _field__combat_difficulty, value);
                }
            }

            int _field__combat_difficulty_friendlies;
            public override int combat_difficulty_friendlies
            {
                get => _field__combat_difficulty_friendlies;
                set
                {
                    SetProperty("combat_difficulty_friendlies", ref _field__combat_difficulty_friendlies, value);
                }
            }

            int _field__reduce_combat_ai;
            public override int reduce_combat_ai
            {
                get => _field__reduce_combat_ai;
                set
                {
                    SetProperty("reduce_combat_ai", ref _field__reduce_combat_ai, value);
                }
            }

            int _field__reduce_campaign_ai;
            public override int reduce_campaign_ai
            {
                get => _field__reduce_campaign_ai;
                set
                {
                    SetProperty("reduce_campaign_ai", ref _field__reduce_campaign_ai, value);
                }
            }

            int _field__combat_speed;
            public override int combat_speed
            {
                get => _field__combat_speed;
                set
                {
                    SetProperty("combat_speed", ref _field__combat_speed, value);
                }
            }

            long _field__date_timer;
            public override long date_timer
            {
                get => _field__date_timer;
                set
                {
                    SetProperty("date_timer", ref _field__date_timer, value);
                }
            }

            int _field__hour;
            public override int hour
            {
                get => _field__hour;
                set
                {
                    SetProperty("hour", ref _field__hour, value);
                }
            }

            int _field__day;
            public override int day
            {
                get => _field__day;
                set
                {
                    SetProperty("day", ref _field__day, value);
                }
            }

            int _field__week;
            public override int week
            {
                get => _field__week;
                set
                {
                    SetProperty("week", ref _field__week, value);
                }
            }

            int _field__month;
            public override int month
            {
                get => _field__month;
                set
                {
                    SetProperty("month", ref _field__month, value);
                }
            }

            int _field__year;
            public override int year
            {
                get => _field__year;
                set
                {
                    SetProperty("year", ref _field__year, value);
                }
            }

            float _field__global_cloud_amount;
            public override float global_cloud_amount
            {
                get => _field__global_cloud_amount;
                set
                {
                    SetProperty("global_cloud_amount", ref _field__global_cloud_amount, value);
                }
            }

            float _field__global_haze_amount;
            public override float global_haze_amount
            {
                get => _field__global_haze_amount;
                set
                {
                    SetProperty("global_haze_amount", ref _field__global_haze_amount, value);
                }
            }

            float _field__average_difficulty;
            public override float average_difficulty
            {
                get => _field__average_difficulty;
                set
                {
                    SetProperty("average_difficulty", ref _field__average_difficulty, value);
                }
            }

            float _field__average_difficulty_period;
            public override float average_difficulty_period
            {
                get => _field__average_difficulty_period;
                set
                {
                    SetProperty("average_difficulty_period", ref _field__average_difficulty_period, value);
                }
            }

            int _field__tutorial_flags;
            public override int tutorial_flags
            {
                get => _field__tutorial_flags;
                set
                {
                    SetProperty("tutorial_flags", ref _field__tutorial_flags, value);
                }
            }

            int _field__default_prisoner_price;
            public override int default_prisoner_price
            {
                get => _field__default_prisoner_price;
                set
                {
                    SetProperty("default_prisoner_price", ref _field__default_prisoner_price, value);
                }
            }

            int _field__encountered_party_1_id;
            public override int encountered_party_1_id
            {
                get => _field__encountered_party_1_id;
                set
                {
                    SetProperty("encountered_party_1_id", ref _field__encountered_party_1_id, value);
                }
            }

            int _field__encountered_party_2_id;
            public override int encountered_party_2_id
            {
                get => _field__encountered_party_2_id;
                set
                {
                    SetProperty("encountered_party_2_id", ref _field__encountered_party_2_id, value);
                }
            }

            WarBender.EntityReference<WarBender.Modules.MenuDefinition> _field__current_menu_id;
            public override WarBender.EntityReference<WarBender.Modules.MenuDefinition> current_menu_id
            {
                get => _field__current_menu_id;
                set
                {
                    SetProperty("current_menu_id", ref _field__current_menu_id, value);
                }
            }

            int _field__current_site_id;
            public override int current_site_id
            {
                get => _field__current_site_id;
                set
                {
                    SetProperty("current_site_id", ref _field__current_site_id, value);
                }
            }

            int _field__current_entry_no;
            public override int current_entry_no
            {
                get => _field__current_entry_no;
                set
                {
                    SetProperty("current_entry_no", ref _field__current_entry_no, value);
                }
            }

            int _field__current_mission_template_id;
            public override int current_mission_template_id
            {
                get => _field__current_mission_template_id;
                set
                {
                    SetProperty("current_mission_template_id", ref _field__current_mission_template_id, value);
                }
            }

            int _field__party_creation_min_random_value;
            public override int party_creation_min_random_value
            {
                get => _field__party_creation_min_random_value;
                set
                {
                    SetProperty("party_creation_min_random_value", ref _field__party_creation_min_random_value, value);
                }
            }

            int _field__party_creation_max_random_value;
            public override int party_creation_max_random_value
            {
                get => _field__party_creation_max_random_value;
                set
                {
                    SetProperty("party_creation_max_random_value", ref _field__party_creation_max_random_value, value);
                }
            }

            string _field__game_log;
            public override string game_log
            {
                get => _field__game_log;
                set
                {
                    SetProperty("game_log", ref _field__game_log, value);
                }
            }

            float _field__rest_period;
            public override float rest_period
            {
                get => _field__rest_period;
                set
                {
                    SetProperty("rest_period", ref _field__rest_period, value);
                }
            }

            int _field__rest_time_speed;
            public override int rest_time_speed
            {
                get => _field__rest_time_speed;
                set
                {
                    SetProperty("rest_time_speed", ref _field__rest_time_speed, value);
                }
            }

            int _field__rest_is_interactive;
            public override int rest_is_interactive
            {
                get => _field__rest_is_interactive;
                set
                {
                    SetProperty("rest_is_interactive", ref _field__rest_is_interactive, value);
                }
            }

            int _field__rest_remain_attackable;
            public override int rest_remain_attackable
            {
                get => _field__rest_remain_attackable;
                set
                {
                    SetProperty("rest_remain_attackable", ref _field__rest_remain_attackable, value);
                }
            }

            ulong _field__player_face_keys0;
            public override ulong player_face_keys0
            {
                get => _field__player_face_keys0;
                set
                {
                    SetProperty("player_face_keys0", ref _field__player_face_keys0, value);
                }
            }

            ulong _field__player_face_keys1;
            public override ulong player_face_keys1
            {
                get => _field__player_face_keys1;
                set
                {
                    SetProperty("player_face_keys1", ref _field__player_face_keys1, value);
                }
            }

            int _field__player_kill_count;
            public override int player_kill_count
            {
                get => _field__player_kill_count;
                set
                {
                    SetProperty("player_kill_count", ref _field__player_kill_count, value);
                }
            }

            int _field__player_wounded_count;
            public override int player_wounded_count
            {
                get => _field__player_wounded_count;
                set
                {
                    SetProperty("player_wounded_count", ref _field__player_wounded_count, value);
                }
            }

            int _field__player_own_troop_kill_count;
            public override int player_own_troop_kill_count
            {
                get => _field__player_own_troop_kill_count;
                set
                {
                    SetProperty("player_own_troop_kill_count", ref _field__player_own_troop_kill_count, value);
                }
            }

            int _field__player_own_troop_wounded_count;
            public override int player_own_troop_wounded_count
            {
                get => _field__player_own_troop_wounded_count;
                set
                {
                    SetProperty("player_own_troop_wounded_count", ref _field__player_own_troop_wounded_count, value);
                }
            }

            public _Impl()
            {
                header = default;
                current_menu_id = default;
                (_4 as IDataObjectChild)?.WithParent(this, -1);
                (class_names as IDataObjectChild)?.WithParent(this, -1);
                (global_variables as IDataObjectChild)?.WithParent(this, -1);
                (triggers as IDataObjectChild)?.WithParent(this, -1);
                (simple_triggers as IDataObjectChild)?.WithParent(this, -1);
                (quests as IDataObjectChild)?.WithParent(this, -1);
                (info_pages as IDataObjectChild)?.WithParent(this, -1);
                (scenes as IDataObjectChild)?.WithParent(this, -1);
                (factions as IDataObjectChild)?.WithParent(this, -1);
                (map_tracks as IDataObjectChild)?.WithParent(this, -1);
                (party_templates as IDataObjectChild)?.WithParent(this, -1);
                (parties as IDataObjectChild)?.WithParent(this, -1);
                (player_party_troop_stacks as IDataObjectChild)?.WithParent(this, -1);
                (map_events as IDataObjectChild)?.WithParent(this, -1);
                (troops as IDataObjectChild)?.WithParent(this, -1);
                (_6 as IDataObjectChild)?.WithParent(this, -1);
                (item_kinds as IDataObjectChild)?.WithParent(this, -1);
            }
        }
    }
}

namespace WarBender
{
    partial class DataObjectFactory : IDataObjectFactory<WarBender.GameData.SavedGame>
    {
        [GeneratedCode("", "")]
        WarBender.GameData.SavedGame IDataObjectFactory<WarBender.GameData.SavedGame>.Create() => WarBender.GameData.SavedGame.Create();
    }
}

namespace WarBender
{
    internal static partial class ValueSerializers
    {
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<int> _int = ValueSerializer.Get<int>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<long> _long = ValueSerializer.Get<long>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<float> _float = ValueSerializer.Get<float>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<string> _string = ValueSerializer.Get<string>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition>> _WarBender_EntityReference_WarBender_Modules_TableauMaterialDefinition_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<bool> _bool = ValueSerializer.Get<bool>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.GameData.Troop>> _WarBender_EntityReference_WarBender_GameData_Troop_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.GameData.Troop>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<System.Drawing.Color> _System_Drawing_Color = ValueSerializer.Get<System.Drawing.Color>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.GameData.PartyFlags> _WarBender_GameData_PartyFlags = ValueSerializer.Get<WarBender.GameData.PartyFlags>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.Modules.MenuDefinition>> _WarBender_EntityReference_WarBender_Modules_MenuDefinition_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.Modules.MenuDefinition>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.GameData.PartyTemplate>> _WarBender_EntityReference_WarBender_GameData_PartyTemplate_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.GameData.PartyTemplate>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<System.Nullable<WarBender.EntityReference<WarBender.GameData.Faction>>> _System_Nullable_WarBender_EntityReference_WarBender_GameData_Faction__ = ValueSerializer.Get<System.Nullable<WarBender.EntityReference<WarBender.GameData.Faction>>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<System.Nullable<WarBender.GameData.AIBehavior>> _System_Nullable_WarBender_GameData_AIBehavior_ = ValueSerializer.Get<System.Nullable<WarBender.GameData.AIBehavior>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.GameData.AIBehavior> _WarBender_GameData_AIBehavior = ValueSerializer.Get<WarBender.GameData.AIBehavior>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.Modules.MapIconDefinition>> _WarBender_EntityReference_WarBender_Modules_MapIconDefinition_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.Modules.MapIconDefinition>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.GameData.Party>> _WarBender_EntityReference_WarBender_GameData_Party_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.GameData.Party>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.GameData.ItemKind>> _WarBender_EntityReference_WarBender_GameData_ItemKind_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.GameData.ItemKind>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<ushort> _ushort = ValueSerializer.Get<ushort>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<byte> _byte = ValueSerializer.Get<byte>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.GameData.ItemModifier> _WarBender_GameData_ItemModifier = ValueSerializer.Get<WarBender.GameData.ItemModifier>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<uint> _uint = ValueSerializer.Get<uint>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.EntityReference<WarBender.GameData.Faction>> _WarBender_EntityReference_WarBender_GameData_Faction_ = ValueSerializer.Get<WarBender.EntityReference<WarBender.GameData.Faction>>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<WarBender.GameData.TroopFlags> _WarBender_GameData_TroopFlags = ValueSerializer.Get<WarBender.GameData.TroopFlags>();
        [GeneratedCode("", "")]
        public static readonly IValueSerializer<ulong> _ulong = ValueSerializer.Get<ulong>();
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.Modules.TableauMaterialDefinition> _ser0 = new WarBender.EntityReferenceSerializer<WarBender.Modules.TableauMaterialDefinition>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition> IValueSerializer<WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition>>.Read(BinaryReader reader) => _ser0.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.Modules.TableauMaterialDefinition> value) => _ser0.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.GameData.Troop>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.GameData.Troop> _ser1 = new WarBender.EntityReferenceSerializer<WarBender.GameData.Troop>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.GameData.Troop> IValueSerializer<WarBender.EntityReference<WarBender.GameData.Troop>>.Read(BinaryReader reader) => _ser1.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.GameData.Troop>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.GameData.Troop> value) => _ser1.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.GameData.PartyFlags>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EnumSerializer<WarBender.GameData.PartyFlags> _ser2 = new WarBender.EnumSerializer<WarBender.GameData.PartyFlags>();
        [GeneratedCode("", "")]
        WarBender.GameData.PartyFlags IValueSerializer<WarBender.GameData.PartyFlags>.Read(BinaryReader reader) => _ser2.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.GameData.PartyFlags>.Write(BinaryWriter writer, WarBender.GameData.PartyFlags value) => _ser2.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.Modules.MenuDefinition>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.Modules.MenuDefinition> _ser3 = new WarBender.EntityReferenceSerializer<WarBender.Modules.MenuDefinition>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.Modules.MenuDefinition> IValueSerializer<WarBender.EntityReference<WarBender.Modules.MenuDefinition>>.Read(BinaryReader reader) => _ser3.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.Modules.MenuDefinition>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.Modules.MenuDefinition> value) => _ser3.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.GameData.PartyTemplate>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.GameData.PartyTemplate> _ser4 = new WarBender.EntityReferenceSerializer<WarBender.GameData.PartyTemplate>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.GameData.PartyTemplate> IValueSerializer<WarBender.EntityReference<WarBender.GameData.PartyTemplate>>.Read(BinaryReader reader) => _ser4.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.GameData.PartyTemplate>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.GameData.PartyTemplate> value) => _ser4.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.GameData.Faction>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.GameData.Faction> _ser5 = new WarBender.EntityReferenceSerializer<WarBender.GameData.Faction>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.GameData.Faction> IValueSerializer<WarBender.EntityReference<WarBender.GameData.Faction>>.Read(BinaryReader reader) => _ser5.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.GameData.Faction>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.GameData.Faction> value) => _ser5.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.GameData.AIBehavior>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EnumSerializer<WarBender.GameData.AIBehavior> _ser6 = new WarBender.EnumSerializer<WarBender.GameData.AIBehavior>();
        [GeneratedCode("", "")]
        WarBender.GameData.AIBehavior IValueSerializer<WarBender.GameData.AIBehavior>.Read(BinaryReader reader) => _ser6.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.GameData.AIBehavior>.Write(BinaryWriter writer, WarBender.GameData.AIBehavior value) => _ser6.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.Modules.MapIconDefinition>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.Modules.MapIconDefinition> _ser7 = new WarBender.EntityReferenceSerializer<WarBender.Modules.MapIconDefinition>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.Modules.MapIconDefinition> IValueSerializer<WarBender.EntityReference<WarBender.Modules.MapIconDefinition>>.Read(BinaryReader reader) => _ser7.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.Modules.MapIconDefinition>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.Modules.MapIconDefinition> value) => _ser7.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.GameData.Party>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.GameData.Party> _ser8 = new WarBender.EntityReferenceSerializer<WarBender.GameData.Party>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.GameData.Party> IValueSerializer<WarBender.EntityReference<WarBender.GameData.Party>>.Read(BinaryReader reader) => _ser8.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.GameData.Party>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.GameData.Party> value) => _ser8.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.Modules.ParticleSystemDefinition>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.Modules.ParticleSystemDefinition> _ser9 = new WarBender.EntityReferenceSerializer<WarBender.Modules.ParticleSystemDefinition>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.Modules.ParticleSystemDefinition> IValueSerializer<WarBender.EntityReference<WarBender.Modules.ParticleSystemDefinition>>.Read(BinaryReader reader) => _ser9.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.Modules.ParticleSystemDefinition>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.Modules.ParticleSystemDefinition> value) => _ser9.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.EntityReference<WarBender.GameData.ItemKind>>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EntityReferenceSerializer<WarBender.GameData.ItemKind> _ser10 = new WarBender.EntityReferenceSerializer<WarBender.GameData.ItemKind>();
        [GeneratedCode("", "")]
        WarBender.EntityReference<WarBender.GameData.ItemKind> IValueSerializer<WarBender.EntityReference<WarBender.GameData.ItemKind>>.Read(BinaryReader reader) => _ser10.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.EntityReference<WarBender.GameData.ItemKind>>.Write(BinaryWriter writer, WarBender.EntityReference<WarBender.GameData.ItemKind> value) => _ser10.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.GameData.ItemModifier>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EnumSerializer<WarBender.GameData.ItemModifier> _ser11 = new WarBender.EnumSerializer<WarBender.GameData.ItemModifier>();
        [GeneratedCode("", "")]
        WarBender.GameData.ItemModifier IValueSerializer<WarBender.GameData.ItemModifier>.Read(BinaryReader reader) => _ser11.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.GameData.ItemModifier>.Write(BinaryWriter writer, WarBender.GameData.ItemModifier value) => _ser11.Write(writer, value);
    }

    partial class ValueSerializer : IValueSerializer<WarBender.GameData.TroopFlags>
    {
        [GeneratedCode("", "")]
        private static readonly WarBender.EnumSerializer<WarBender.GameData.TroopFlags> _ser12 = new WarBender.EnumSerializer<WarBender.GameData.TroopFlags>();
        [GeneratedCode("", "")]
        WarBender.GameData.TroopFlags IValueSerializer<WarBender.GameData.TroopFlags>.Read(BinaryReader reader) => _ser12.Read(reader);
        [GeneratedCode("", "")]
        void IValueSerializer<WarBender.GameData.TroopFlags>.Write(BinaryWriter writer, WarBender.GameData.TroopFlags value) => _ser12.Write(writer, value);
    }

    namespace CodeGeneration
    {
        partial class RecordTypes
        {
            [GeneratedCode("", "")]
            static partial void GetGeneratedCodeHash(ref int hash) => hash = 798107442;
        }
    }
}
